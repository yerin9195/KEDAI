<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="schedule">

	<!-- 사내 캘린더에서 사내캘린더 소분류  보여주기  com.spring.app.schedule.domain. -->
	<select id="showCompanySmallCalendar" resultType="CalendarSmallCategoryVO">
		select smcatgono, fk_lgcatgono, smcatgoname
		from tbl_calendar_small_category
		where fk_lgcatgono = 2
		order by smcatgono asc
	</select>
	
	<!-- 내 캘린더에서 내캘린더 소분류  보여주기  com.spring.app.schedule.domain. -->
	<select id="showMySmallCalendar" resultType="CalendarSmallCategoryVO">
		select smcatgono, fk_lgcatgono, smcatgoname
		from tbl_calendar_small_category
		where fk_lgcatgono = 1
		and fk_empid = #{fk_empid} 
		order by smcatgono asc
	</select>
	
	 <!-- 등록된 일정에 대한 정보(달력에 표시됨)-->
	<select id="allSchedule" resultType="CalendarScheduleVO" parameterType="String">
		select scheduleno, cal_startdate, cal_enddate, cal_subject, cal_color, cal_place, cal_joinuser, cal_content, fk_smcatgono, fk_lgcatgono, fk_empid 
		from tbl_calendar_schedule
		where fk_empid = #{fk_empid} OR
		fk_lgcatgono = 2 OR
		(fk_lgcatgono != 2 AND lower(cal_joinuser) like '%'|| lower(#{fk_empid}) ||'%')
		order by scheduleno asc
	</select>


	<!-- 일정 상세 보기 -->
	<resultMap type="HashMap" id="detailSchedule_Map">
		<result property="SCHEDULENO" 	column="scheduleno" 	javaType="String" />
		<result property="CAL_STARTDATE" 	column="cal_startdate" 		javaType="String" />
		<result property="CAL_ENDDATE" 		column="cal_enddate" 		javaType="String" />
		<result property="CAL_SUBJECT" 		column="cal_subject" 		javaType="String" />
		<result property="CAL_COLOR" 		column="cal_color" 			javaType="String" />
		<result property="CAL_PLACE" 		column="cal_place" 			javaType="String" />
		<result property="CAL_JOINUSER" 	column="cal_joinuser" 		javaType="String" />
		<result property="CAL_CONTENT" 		column="cal_content" 		javaType="String" />
		<result property="FK_SMCATGONO" column="fk_smcatgono" 	javaType="String" />
		<result property="FK_LGCATGONO" column="fk_lgcatgono" 	javaType="String" />
		<result property="FK_EMPID" 	column="fk_empid" 		javaType="String" />
		<result property="NAME" 		column="name" 			javaType="String" />
		<result property="SMCATGONAME" 	column="smcatgoname" 	javaType="String" />
	</resultMap>
	<select id="detailSchedule" parameterType="String" resultMap="detailSchedule_Map">
		select SD.scheduleno
		     , to_char(SD.cal_startdate,'yyyy-mm-dd hh24:mi') as cal_startdate
		     , to_char(SD.cal_enddate,'yyyy-mm-dd hh24:mi') as cal_enddate  
		     , SD.cal_subject
		     , SD.cal_color
		     , nvl(SD.cal_place,'-') as cal_place
		     , nvl(SD.cal_joinuser,'공유자가 없습니다.') as cal_joinuser
		     , nvl(SD.cal_content,'') as cal_content
		     , SD.fk_smcatgono
		     , SD.fk_lgcatgono
		     , SD.fk_empid
		     , E.name
		     , SC.smcatgoname
		from tbl_calendar_schedule SD 
		JOIN tbl_employees E
		ON SD.fk_empid = E.empid
		JOIN tbl_calendar_small_category SC
		ON SD.fk_smcatgono = SC.smcatgono
		where SD.scheduleno = #{scheduleno}
	</select>
	

	<!-- 사내 캘린더에 캘린더 소분류 명 조회 -->
	<select id="existComCalendar" parameterType="String" resultType="int">
		select count(*)
		from tbl_calendar_small_category
		where fk_lgcatgono = 2 and smcatgoname = #{com_smcatgoname}  
	</select>
	
	<!-- 사내 캘린더에 캘린더 소분류 추가하기 --> 
	<insert id="addComCalendar" parameterType="HashMap">
		insert into tbl_calendar_small_category(smcatgono, fk_lgcatgono, smcatgoname, fk_empid)
		values(seq_smcatgono.nextval, 2, #{com_smcatgoname}, #{fk_empid})
	</insert>
	
		
	<!-- 수정된 (사내캘린더 또는 내캘린더)속의 소분류 카테고리명이 이미 해당 사용자가 만든 소분류 카테고리명으로 존재하는지 유무 알아오기 -->
	<select id="existsCalendar" parameterType="HashMap" resultType="int">
	    select count(*)
		from tbl_calendar_small_category
		where fk_lgcatgono = #{caltype} 
		and fk_empid = #{empid} 
		and smcatgoname = #{smcatgoname}
	</select>
	
		<!-- (사내캘린더 또는 내캘린더)속의 소분류 카테고리인 서브캘린더 수정하기    -->
	<update id="editCalendar" parameterType="HashMap">
		update tbl_calendar_small_category set smcatgoname = #{smcatgoname}
		where smcatgono = #{smcatgono}
	</update>
	
	<!-- 내 캘린더에 캘린더 소분류 명 조회 -->
	<select id="existMyCalendar" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_calendar_small_category
		where fk_lgcatgono = 1 and fk_empid = #{fk_empid} and smcatgoname = #{my_smcatgoname}  
	</select>
	
	<!-- 내 캘린더에 캘린더 소분류 추가하기 --> 
	<insert id="addMyCalendar" parameterType="HashMap">
		insert into tbl_calendar_small_category(smcatgono, fk_lgcatgono, smcatgoname, fk_empid)
		values(seq_smcatgono.nextval, 1, #{my_smcatgoname}, #{fk_empid})
	</insert>	
	
	<!-- (사내캘린더 또는 내캘린더)속의  소분류 카테고리인 서브캘린더 삭제하기   -->
	<delete id="deleteSubCalendar" parameterType="String">
		delete from tbl_calendar_small_category
		where smcatgono = #{smcatgono}
	</delete>
	

	<!-- 총 일정 검색 건수(totalCount) -->
	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		select count(*) 
		from tbl_calendar_schedule
		where ( to_char(cal_startdate,'YYYY-MM-DD') between #{cal_startdate} and #{cal_enddate} )
		and   ( to_char(cal_enddate,'YYYY-MM-DD') between #{cal_startdate} and #{cal_enddate} ) 
		
		<if test='fk_lgcatgono == "" and searchWord == "" and searchType == "" '>  <!-- 모든캘린더이고 검색대상이 없을 경우 -->
		    and ( fk_lgcatgono = 2 OR fk_empid = #{fk_empid} OR 
		          ( fk_empid != #{fk_empid} and lower(cal_joinuser) like '%'||lower(#{fk_empid})||'%' ) ) <!-- 사내캘린더 와 자신이 작성한 내캘린더 와 공유받은 캘린더만 조회되도록 한다. -->
		</if>
		
		<if test='fk_lgcatgono == "2" and searchWord == "" and searchType == "" '>  <!-- 사내캘린더이고 검색대상이 없을 경우 -->
		    and ( fk_lgcatgono = 2 )                                                <!-- 사내캘린더만 조회되도록 한다. -->
		</if>
		
		<if test='fk_lgcatgono == "1" and searchWord == "" and searchType eq "" '>  <!-- 내캘린더이고 검색대상이 없을 경우 -->
		    and ( fk_lgcatgono = 1 AND fk_empid = #{fk_empid} )                                        <!-- 내캘린더만 조회되도록 한다. -->
		</if>
			
		<if test='searchWord != "" and searchType eq "cal_joinuser" '>  <!-- 검색대상을 공유자로 검색할 경우 -->
			and fk_lgcatgono = 1                                    <!-- 내캘린더 -->
			and fk_empid = #{fk_empid}                            <!-- 로그인한 사용자가 작성한 것을 다른 사용자에게 공유 한것 -->
			and lower(cal_joinuser) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
		</if>
		
		<if test='searchWord != "" and searchType neq "" and searchType neq "cal_joinuser" '>  <!-- 검색대상을 공유자가 아닌 다른 것으로 검색할 경우 -->
			and lower(${searchType}) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
			<choose>
				<when test='fk_lgcatgono == "1" '>                       <!-- 내캘린더내에서만 검색할 경우  -->
					and fk_lgcatgono = 1 
					and fk_empid = #{fk_empid}                         <!-- 로그인한 사용자가 작성한 것 -->
				</when>
				
				<when test='fk_lgcatgono == "2" '>                       <!-- 사내캘린더내에서만 검색할 경우  -->
					and fk_lgcatgono = 2 
				</when>
			</choose>			
		</if>
	</select>
	
	
	<!-- 페이징 처리한 캘린더 가져오기(검색어가 없다라도 날짜범위 검색은 항시 포함된 것임) -->
	<resultMap type="HashMap" id="scheduleListSearchWithPaging_Map">
		<result property="SCHEDULENO" 		column="scheduleno" 		javaType="String" />
		<result property="CAL_STARTDATE" 	column="cal_startdate" 		javaType="String" />
		<result property="CAL_ENDDATE" 		column="cal_enddate" 		javaType="String" />
		<result property="SMCATGONAME" 		column="smcatgoname" 		javaType="String" />
		<result property="LGCATGONAME" 		column="lgcatgoname" 		javaType="String" />
		<result property="NAME" 			column="name" 				javaType="String" />
		<result property="CAL_SUBJECT" 		column="cal_subject" 		javaType="String" />
		<result property="CAL_CONTENT" 		column="cal_content" 		javaType="String" />
	</resultMap>
	<select id="scheduleListSearchWithPaging" parameterType="HashMap" resultMap="scheduleListSearchWithPaging_Map">  
		select scheduleno 
		     , cal_startdate, cal_enddate
		     , smcatgoname, lgcatgoname, name
		     , cal_subject, cal_content 
		from 
		(
			select  row_number() over(order by SD.scheduleno desc) as rno 
			      , SD.scheduleno
			      , to_char(SD.cal_startdate, 'yyyy-mm-dd hh24:mi') as cal_startdate
			      , to_char(SD.cal_enddate, 'yyyy-mm-dd hh24:mi') as cal_enddate
			      , SC.smcatgoname, LC.lgcatgoname, M.name 
			      , SD.cal_subject, SD.cal_content 
			from tbl_calendar_schedule SD 
			JOIN tbl_employees E 
			ON SD.fk_empid = E.empid
			JOIN tbl_calendar_small_category SC 
			ON SD.fk_smcatgono = SC.smcatgono
			JOIN tbl_calendar_large_category LC 
			ON SD.fk_lgcatgono = LC.lgcatgono 
			
			where ( to_char(SD.cal_startdate,'YYYY-MM-DD') between #{cal_startdate} and #{cal_enddate} )
			AND   ( to_char(SD.cal_enddate,'YYYY-MM-DD') between #{cal_startdate} and #{cal_enddate} ) 
			
			<if test='fk_lgcatgono == "" and searchWord == "" and searchType == "" '>  <!-- 모든캘린더이고 검색대상이 없을 경우 -->
			    and ( SD.fk_lgcatgono = 2 OR SD.fk_empid = #{fk_empid} OR
			          ( SD.fk_empid != #{fk_empid} and lower(SD.cal_joinuser) like '%'||lower(#{fk_empid})||'%' ) )  <!-- 사내캘린더 와 자신이 작성한 내캘린더 와 공유받은 캘린더만 조회되도록 한다. -->
			</if>
			
			<if test='fk_lgcatgono == "2" and searchWord == "" and searchType == "" '>  <!-- 사내캘린더이고 검색대상이 없을 경우 -->
			    and ( SD.fk_lgcatgono = 2 )                                             <!-- 사내캘린더만 조회되도록 한다. -->
			</if>
			
			<if test='fk_lgcatgono == "1" and searchWord == "" and searchType eq "" '>  <!-- 내캘린더이고 검색대상이 없을 경우 -->
			    and ( SD.fk_lgcatgono = 1 AND SD.fk_empid = #{fk_empid} )                                     <!-- 내캘린더만 조회되도록 한다. -->
			</if>
			
			<if test='searchWord != "" and searchType eq "joinuser" '>     <!-- 검색대상을 공유자로 검색할 경우 -->
				and SD.fk_lgcatgono = 1                                    <!-- 내캘린더 -->
				and SD.fk_empid = #{fk_empid}                            <!-- 로그인한 사용자가 작성한 것을 다른 사용자에게 공유 한것 -->
				and lower(SD.cal_joinuser) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
			</if>
			
			<if test='searchWord != "" and searchType neq "" and searchType neq "joinuser" '>   <!-- 검색대상을 공유자가 아닌 다른 것으로 검색할 경우 -->
				and lower(${searchType}) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
				<choose>
					<when test='fk_lgcatgono == "1" '>                       <!-- 내캘린더내에서만 검색할 경우  -->
						and SD.fk_lgcatgono = 1 
						and SD.fk_empid = #{fk_empid}                      <!-- 로그인한 사용자가 작성한 것 -->
					</when>
					
					<when test='fk_lgcatgono == "2" '>                       <!-- 사내캘린더내에서만 검색할 경우  -->
						and SD.fk_lgcatgono = 2 
					</when>
				</choose>			
			</if>
		) V 
		where V.rno between #{startRno} and #{endRno}
	</select>
	
	<!-- 일정 등록시 내캘린더,사내캘린더 선택에 따른 서브캘린더 종류를 알아오기 -->
    <select id="selectSmallCategory" parameterType="HashMap" resultType="CalendarSmallCategoryVO">
    	select smcatgono, fk_lgcatgono, smcatgoname
		from tbl_calendar_small_category
		where fk_lgcatgono = #{fk_lgcatgono} and fk_empid= #{fk_empid}
		order by smcatgono asc
    </select>
    
	<!-- 공유자를 찾기 위한 특정글자가 들어간 회원명단 불러오기 -->
    <select id="searchJoinUserList" parameterType="String" resultType="MemberVO">
    	select empid, name
		from tbl_employees
		where lower(name) like '%'|| lower(#{joinUserName}) ||'%'
    </select>
    
    <!-- 일정 등록하기 -->
    <insert id="registerSchedule_end" parameterType="HashMap">
    	insert into tbl_calendar_schedule(scheduleno, cal_startdate, cal_enddate, cal_subject, cal_color, cal_place, cal_joinuser, cal_content, fk_smcatgono, fk_lgcatgono, fk_empid) 
    	values(seq_scheduleno.nextval, to_date(#{cal_startdate}, 'yyyymmddhh24miss'), to_date(#{cal_enddate}, 'yyyymmddhh24miss'), #{cal_subject}, #{cal_color}, #{cal_place}, #{cal_joinuser}, #{cal_content}, #{fk_smcatgono}, #{fk_lgcatgono}, #{fk_empid})  
    </insert>

    <!-- 일정삭제하기 -->
	<delete id="deleteSchedule" parameterType="String">
		delete from tbl_calendar_schedule 
		where scheduleno = #{scheduleno} 
	</delete>
	
	<!-- 일정수정하가 -->
	<update id="editSchedule_end" parameterType="CalendarScheduleVO">
		update tbl_calendar_schedule set cal_startdate = to_date(#{cal_startdate}, 'yyyymmddhh24miss')
		                               , cal_enddate = to_date(#{cal_enddate}, 'yyyymmddhh24miss')
		                               , cal_subject = #{cal_subject}
		                               , fk_lgcatgono = #{fk_lgcatgono}
		                               , fk_smcatgono = #{fk_smcatgono}
		                               , cal_color = #{cal_color}
		                               , cal_place = #{cal_place}
		                               , cal_joinuser = #{cal_joinuser}
		                               , cal_content = #{cal_content}
		where scheduleno = #{scheduleno} 
	</update>
	
</mapper>