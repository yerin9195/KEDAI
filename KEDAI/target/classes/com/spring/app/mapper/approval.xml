<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="approval">

	<select id="getDeptNumber" resultType="String" parameterType="HashMap">
		select dept_name
		from tbl_dept
		where dept_code = to_number(#{dept_code})
	</select>
	
	<!--  result가 3개인 이유 : 컬럼이 3개이기 때문!! -->
		<!-- property는 key값을 의미함. 보통 column과 동일하게 쓰지만 이번에는 연습이니까 대문자로 표기해본다. -->
		<!-- javaType 은 map의 value타입을 의미한다. -->
	<resultMap type="HashMap" id="allEmpListMap">
		<result property="empid" column="empid" javaType="String" ></result>
		<result property="name" column="name" javaType="String" ></result>
		<result property="fk_dept_code" column="fk_dept_code" javaType="String" ></result>
		<result property="job_code" column="job_code" javaType="String" ></result>
		<result property="job_name" column="job_name" javaType="String" ></result>
		<result property="dept_name" column="dept_name" javaType="String" ></result>
	<!--	<result property="cnt_bydept" column="cnt_bydept" javaType="String" ></result> -->
	</resultMap>
	
	<!-- 결재라인 선택을 위해 모든 직원 리스트 불러오기 -->
	<select id="allEmployeeList" resultMap="allEmpListMap">  <!-- resultMap의 이름을 위에 resultMap태그의 id로 넣어줘야 매핑이 된다 -->
		SELECT E.empid, E.name, E.fk_dept_code, J.job_code, J.job_name, D.dept_name
		FROM  tbl_employees E
		JOIN tbl_job J
		ON  E.fk_job_code = J.job_code
		LEFT JOIN tbl_dept D
		ON E.fk_dept_code = D.dept_code
		LEFT JOIN (
		    SELECT fk_dept_code, COUNT(empid) AS cnt_bydept
		    FROM tbl_employees
		    GROUP BY fk_dept_code
		) C
		ON E.fk_dept_code = C.fk_dept_code
		where empid != #{login_empid}
		ORDER BY D.dept_name DESC, J.job_code ASC
	</select>
	
	<!-- 
	<resultMap type="HashMap" id="">
	
	</resultMap>
	
	<select id="numByDept" resultMap="numDept" >
		SELECT D.dept_name, COUNT(E.empid) AS employee_count
		FROM tbl_employees E
		LEFT JOIN tbl_dept D
		ON E.fk_dept_code = D.dept_code
		GROUP BY E.fk_dept_code, D.dept_name
		ORDER BY D.dept_name DESC
	</select>
 -->
 
	
	<!-- 결재라인 선택을 위해 모든 직원 리스트 불러오기 -->
 	<select id="allDeptList" resultType="com.spring.app.domain.DeptVO">
 		SELECT CASE WHEN D.dept_code IS NULL THEN ' ' ELSE TO_CHAR(D.dept_code) END AS dept_code,
       			nvl(D.dept_name, ' ') as dept_name
		FROM tbl_dept D
		RIGHT JOIN tbl_employees E ON E.fk_dept_code = D.dept_code
		GROUP BY D.dept_code, D.dept_name
		ORDER BY D.dept_code desc
 	</select>
 
 
 	<resultMap type="HashMap" id="deptEmpMap">
 		<result property="empid" column="empid" javaType="String" ></result>
		<result property="name" column="name" javaType="String" ></result>
		<result property="fk_dept_code" column="fk_dept_code" javaType="String" ></result>
		<result property="dept_name" column="dept_name" javaType="String" ></result>
		<result property="job_code" column="job_code" javaType="String" ></result>
		<result property="job_name" column="job_name" javaType="String" ></result>
 	</resultMap>
 
 	<select id="deptEmpList" resultMap="deptEmpMap">
 		select E.empid, E.name, J.job_code, J.job_name, CASE WHEN D.dept_code IS NULL THEN ' ' ELSE TO_CHAR(D.dept_code) END AS fk_dept_code,
       				nvl(D.dept_name, ' ') as dept_name
		FROM  tbl_employees E
		JOIN tbl_job J
		ON  E.fk_job_code = J.job_code
		LEFT JOIN tbl_dept D
		ON E.fk_dept_code = D.dept_code
		where empid != #{loginuser_id} 
		<choose>
        	<when test='dept_code == " "'>
	   			and fk_dept_code is null	
    		</when>
 			<otherwise>
 				and fk_dept_code = to_number(#{dept_code})
 			</otherwise>
 		</choose>
		ORDER BY D.dept_code asc, J.job_code ASC
	</select>
 	
 	<!-- 	// doc_no의 시퀀스 채번해오기 -->
 	<select id="getDoc_noSeq" resultType="String">
 		select doc_noSeq.nextval
		from dual
 	</select>
 	
 	 	<!--  approval_noSeq 시퀀스 채번해오기  -->
 	<select id="getApproval_noSeq" resultType="String">
 		select approval_noSeq.nextval
		from dual
 	</select>
 	
 	
 	<!-- 첨부파일이 없는 서류 작성하기(tbl_doc) -->
 	<insert id="noFile_newdoc" parameterType="HashMap">
		insert into tbl_doc(doc_no, fk_doctype_code, fk_empid, doc_subject, doc_content, created_date)
		values(#{docvo.doc_no}, #{docvo.fk_doctype_code}, #{docvo.fk_empid}, #{docvo.doc_subject}, #{docvo.doc_content}, #{docvo.created_date})
	</insert>
 	
 	
 	<!-- 첨부파일이 없는 서류 작성하기(tbl_minutes) -->
 	<insert id="noFile_minutes" parameterType="HashMap">
		insert into tbl_minutes(minutes_no, fk_doc_no, meeting_date, attendees, host_dept)
		values( minutes_noSeq.nextval, #{fk_doc_no}, #{meeting_date}, #{attendees}, #{host_dept})
	</insert>
 	
 	
 	<!-- 첨부파일이 없는 서류 작성하기(tbl_approval) -->
 	<insert id="noFile_approval" parameterType="HashMap">
 		insert into tbl_approval(approval_no, fk_doc_no, fk_empid, status, level_no)
		values(to_number(#{approval_no}), #{fk_doc_no}, #{empId}, 0, #{level_no})		
	</insert>
	
	<!-- 첨부파일이 있을 때 첨부파일 insert하기 -->
	<insert id="withFile_doc" parameterType="HashMap">
		insert into tbl_doc_file(doc_file_no, fk_doc_no, doc_org_filename, doc_filename, doc_filesize)
		values( doc_file_noSeq.nextval, #{fk_doc_no}, #{doc_org_filename}, #{doc_filename}, to_number(#{doc_filesize}))
	</insert>


	<resultMap type="HashMap" id="docList_Map">
 		<result property="doc_no" 			column="doc_no" 			javaType="String" ></result>
		<result property="fk_empid" 		column="fk_empid" 			javaType="String" ></result>
		<result property="doc_subject" 		column="doc_subject" 		javaType="String" ></result>
		<result property="created_date" 	column="created_date" 		javaType="String" ></result>
		<result property="doctype_name" 	column="doctype_name" 		javaType="String" ></result>
		<result property="status" 			column="status" 			javaType="String" ></result>
		<result property="level_no" 		column="level_no" 			javaType="String" ></result>
		<result property="APPROVAL_EMPID" 	column="APPROVAL_EMPID" 	javaType="String" ></result>
		<result property="isAttachment" 	column="isAttachment" 		javaType="String" ></result>
 	</resultMap>

	<select id="myDocList" resultMap="docList_Map">
		SELECT  D.doc_no, D.fk_empid, D.doc_subject, to_char(D.created_date, 'yyyy-mm-dd') as created_date
    		, T.doctype_name, AP.status, AP.level_no, AP.APPROVAL_EMPID
    		, CASE WHEN F.fk_doc_no IS NOT NULL THEN '1' ELSE '0' END AS isAttachment
		FROM tbl_doc D
		JOIN tbl_doctype T ON T.doctype_code = D.fk_doctype_code
		JOIN ( 
		    SELECT A1.fk_doc_no, A2.status, A1.level_no, A2.fk_empid AS APPROVAL_EMPID
		    FROM (
		        SELECT fk_doc_no, MIN(level_no) AS level_no
		        FROM tbl_approval 
		        GROUP BY fk_doc_no
		    ) A1
		    JOIN tbl_approval A2 
		    ON A1.fk_doc_no = A2.fk_doc_no AND A1.level_no = A2.level_no
		) AP
		ON AP.fk_doc_no = D.doc_no
		LEFT JOIN ( 
		    SELECT fk_doc_no
		    FROM tbl_doc_file
		    GROUP BY fk_doc_no
		) F 
		ON F.fk_doc_no = D.doc_no
		WHERE D.fk_empid = #{loginEmpId}
		ORDER BY D.created_date DESC, D.DOC_NO DESC
	</select>
 
 
 	<select id="myApprovalDoc" resultMap="docList_Map">
 		SELECT D.doc_no, D.fk_empid, D.doc_subject, to_char(D.created_date, 'yyyy-mm-dd') as created_date
    		, T.doctype_name, A.status, A.level_no, A.fk_empid AS APPROVAL_EMPID
    		, CASE WHEN F.fk_doc_no IS NOT NULL THEN '1' ELSE '0' END AS isAttachment
		from tbl_doc D
		JOIN tbl_doctype T
		ON T.doctype_code = D.fk_doctype_code
		JOIN tbl_approval A
		ON A.fk_doc_no = D.doc_no
		LEFT JOIN (
		        SELECT fk_doc_no
		        FROM tbl_doc_file
		        GROUP BY fk_doc_no
		) F ON F.fk_doc_no = D.doc_no
		where A.fk_empid = #{loginEmpId}
 	</select>
 	
 	
 	<resultMap type="HashMap" id="docInfo_Map">
 		<result property="fk_doc_no" 		column="fk_doc_no" 			javaType="String" ></result>
		<result property="status" 			column="status" 			javaType="String" ></result>
		<result property="level_no" 		column="level_no" 			javaType="String" ></result>
 	</resultMap>
 	
 	<select id="myapprovalinfo" resultMap="docInfo_Map">
 		SELECT A.fk_doc_no, A.status, A.level_no
		FROM tbl_approval A
		WHERE A.fk_doc_no IN (
    		SELECT B.fk_doc_no
    		FROM tbl_approval B
    		WHERE B.fk_empid = #{loginEmpId} AND STATUS = 0 
		)
 	</select>
 	
</mapper>